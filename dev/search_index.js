var documenterSearchIndex = {"docs":
[{"location":"developers/#Package-Development","page":"Package Development","title":"Package Development","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"Pages = [\"developers.md\"]\nDepth = 3","category":"page"},{"location":"developers/#Example-workflow-ideas","page":"Package Development","title":"Example workflow ideas","text":"","category":"section"},{"location":"developers/#Gathering-data","page":"Package Development","title":"Gathering data","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"using BCIInterface\n\ndevice = Device(MCP3208(\"/dev/spidev0.0\", 8))\nexperiment = Experiment(device, \"Test\", tags = [\"test\", \"significant\"], extra_info = Dict(:delay => 2), path = \"mydata/\")\nstates = [:left, :middle, :right]\nwhile true\n    for state in states\n        # Make testperson think of the $state side\n        sleep(2)\n        gather_data(device, \"data/test\", Seconds(10), tags = [state])\n    end\nend\nsave_data(experiment)","category":"page"},{"location":"developers/#Processing-data","page":"Package Development","title":"Processing data","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"data = load_data(\"Test\", :raw, path = \"mydata/\")\ndata_handler = DataHandler(\"Standard\", StandardFFT())\nprocessed_data = process_all(data, data_handler)\nsave_data(processed_data)","category":"page"},{"location":"developers/#Training-on-data","page":"Package Development","title":"Training on data","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"using BCIInterface\n\ndata = load_data(\"/data/test\")\nai = create_model(StandardOne(), data)\nai.max_accuracy = 0.9\ntrain!(ai, 100)","category":"page"},{"location":"developers/#Filtering-data","page":"Package Development","title":"Filtering data","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"using BCIInterface\n\nfunction myfilter(extra_info::Dict)::Bool\n    if haskey(extra_info, :delay) && extra_info[:delay] < 3\n        return true\n    end\n    return false\nend\ndata_filter = DataFilter(\n    include_tags = [[\"test\"], [\"significant\"]], \n    exclude_tags = [\"insignificant\"], \n    extra_info_filter = myfilter\n)\n\ndata = load_data(\"/data/test\", filter = data_filter)","category":"page"},{"location":"developers/#Creating-custom-models","page":"Package Development","title":"Creating custom models","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"using BCIInterface\n\ndata = load_data(\"/data/test\")\noutputs = [\n    (:left => [1.0, 1.0, 0.0, 0.0]),\n    (:none => [1.0, 0.0, 1.0, 0.0]),\n    (:right => [1.0, 0.0, 0.0, 1.0]),\n] # This seems very sensible...\nset_outputs!(data, outputs)\n\n\"\"\"\nMy own custom model. It's surely big enough to do any task!\n\"\"\"\nfunction my_own_model(input_shape, output_shape)\n    return @autosize (input_shape...) Chain(\n        Conv((3, 1), _ => 64),\n        flatten,\n        Dense(_, 100),\n        Dense(100, output_shape)\n    )\nend\n\nai = create_model(DefaultOne(), data, struct_constructer = my_own_model)\nai.max_accuracy = 0.9\ntrain!(ai, 100)","category":"page"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"See https://fluxml.ai/Flux.jl/stable/outputsize/.","category":"page"},{"location":"developers/#For-Package-Developers","page":"Package Development","title":"For Package Developers","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"This section is for everybody who wants to directly contribute to this package (and for us to not forget details!).","category":"page"},{"location":"developers/#Documentation","page":"Package Development","title":"Documentation","text":"","category":"section"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"To preview the documentation locally before pushing to GitHub, use previewDocs.sh (Linux) or manually execute","category":"page"},{"location":"developers/","page":"Package Development","title":"Package Development","text":"`julia --project=docs -ie 'using BCIInterface, LiveServer; servedocs()'`","category":"page"},{"location":"supported_boards/#Supported-Boards","page":"Supported Boards","title":"Supported Boards","text":"","category":"section"},{"location":"supported_boards/#OpenBCI-GUI","page":"Supported Boards","title":"OpenBCI GUI","text":"","category":"section"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"You can use the OpenBCI GUI to get EEG data.","category":"page"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"You need to do the following steps in the GUI:","category":"page"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"Create a stream in the GUI by connecting your OpenBCI board, streaming from a file, using a synthetic stream, ...\nOpen the \"Networking\" widget.\nChange the protocol to \"LSL\" in the top right corner\nSet the data type in Stream 1 to \"FFT\"\nEnable \"Filter\" if you want\nClick on \"Start LSL Stream\nClick on \"Start Data Stream\" in the top left","category":"page"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"Now, you can create the Board object responsible for receiving the data in Julia using","category":"page"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"board = GanglionGUI(NUM_CHANNELS)","category":"page"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"where NUM_CHANNELS exactly equals the number of channels whatever data source connected to the GUI has.","category":"page"},{"location":"supported_boards/#MCP3208","page":"Supported Boards","title":"MCP3208","text":"","category":"section"},{"location":"supported_boards/","page":"Supported Boards","title":"Supported Boards","text":"TODO","category":"page"},{"location":"MCP3208/#The-MCP3208-–-a-cheap-alternative-for-commercial-EEGs","page":"The MCP3208 – a cheap alternative for commercial EEGs","title":"The MCP3208 – a cheap alternative for commercial EEGs","text":"","category":"section"},{"location":"eeg/#Gathering,-processing-and-loading-EEG-data","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"","category":"section"},{"location":"eeg/#Introduction","page":"Gathering, processing and loading EEG data","title":"Introduction","text":"","category":"section"},{"location":"eeg/#Gathering-data","page":"Gathering, processing and loading EEG data","title":"Gathering data","text":"","category":"section"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"To gather EEG data, you will first need a physical EEG device. We are currently developing our own which you can build yourself at home with the instrucations in The MCP3208 – a cheap alternative for commercial EEGs.","category":"page"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"This framework currently only offers direct support for this EEG. However, support can be easily extended, for instructions see Using your own EEG device.","category":"page"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"The following steps assume that you already have the hardware set up. If you have added your own EEG, just replace MCP3208 with the custom function you created.","category":"page"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"To gather EEG data, you need to create a Device object with Device(board::EEGBoard). An Example:","category":"page"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"device = Device(MCP3208(\"/dev/spidev0.0\", 8))","category":"page"},{"location":"eeg/","page":"Gathering, processing and loading EEG data","title":"Gathering, processing and loading EEG data","text":"For details about MCP3208, see MCP3208.","category":"page"},{"location":"eeg/#Processing-data","page":"Gathering, processing and loading EEG data","title":"Processing data","text":"","category":"section"},{"location":"advanced_customisation/#Using-your-own-EEG-device","page":"Using your own EEG device","title":"Using your own EEG device","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BCIInterface","category":"page"},{"location":"#BCIInterface","page":"Home","title":"BCIInterface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BCIInterface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"WARNING: This package is currently undergoing large changes and refactoring, meaning the documentation may be out of date and the current development branch (\"refactor\") isn't finished yet.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note: Not working right now!","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can install this package with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/AR102/Interpreting-EEG-with-AI#refactor\")","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Include the package in your code with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BCIInterface","category":"page"},{"location":"","page":"Home","title":"Home","text":"To start collecting EEG data, first create a board using the instructions in Supported Boards.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then create a Device and Experiment with it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"device = Device(board)\nexperiment = Experiment(device, \"NameOfMyExperiment\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, say you want to later let an AI predict what colour a test person is thinking of. For this, you want the AI to classify the data using three categories: The person thinking of red, blue and yellow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A possible setup would be to first make the test person think of red for 5 seconds (by telling them to or showing it on a screen) and start gathering data at the same time using","category":"page"},{"location":"","page":"Home","title":"Home","text":"gather_data!(experiment, 5, tags=[:red])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, you repeat the same for yellow and blue, replacing [:red] by [:yellow] and [:blue] respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now you can start to train an AI using your collected data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First, you need to actually create the model using...","category":"page"},{"location":"","page":"Home","title":"Home","text":"TODO","category":"page"},{"location":"bci/#Creating,-managing-and-using-AI","page":"Creating, managing and using AI","title":"Creating, managing and using AI","text":"","category":"section"},{"location":"API/#Function-and-Type-Documentation","page":"Function & Type Documentation","title":"Function & Type Documentation","text":"","category":"section"},{"location":"API/#Index","page":"Function & Type Documentation","title":"Index","text":"","category":"section"},{"location":"API/","page":"Function & Type Documentation","title":"Function & Type Documentation","text":"Modules = [BCIInterface]","category":"page"},{"location":"API/#Documentation","page":"Function & Type Documentation","title":"Documentation","text":"","category":"section"},{"location":"API/","page":"Function & Type Documentation","title":"Function & Type Documentation","text":"Modules = [BCIInterface]","category":"page"},{"location":"API/#BCIInterface.DataHandler-Tuple{BCIInterface.DataProcessor, Any}","page":"Function & Type Documentation","title":"BCIInterface.DataHandler","text":"DataHandler(data_processor::DataProcessor, data_io::DataIO; cases=nothing,\nname=nothing, max_freq=nothing)\n\nCreate a DataHandler instance. cases, name and max_freq are automatically  determined by data saved at path if they are nothing.\n\nExample:\n\ndata_io = DataIO(\"data/test\", states)\ndata_handler = DataHandler(data_io, StandardFFT())\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.DataProcessor","page":"Function & Type Documentation","title":"BCIInterface.DataProcessor","text":"Abstract class containing data processors.\n\nDefined data processors: StandardProcessor: The standard processors with preset arguments and functions, for  details see StandardProcessor.\n\n\n\n\n\n","category":"type"},{"location":"API/#BCIInterface.Device","page":"Function & Type Documentation","title":"BCIInterface.Device","text":"Device for gathering EEG data. Create it using\n\nDevice(board::EEGBoard)\n\n... TODO\n\n\n\n\n\n","category":"type"},{"location":"API/#BCIInterface.Experiment-Tuple{Device, String}","page":"Function & Type Documentation","title":"BCIInterface.Experiment","text":"Experiment(device::Device, name::String; tags::Array=[], \nextra_info::Dict=Dict(), path::String=\"data/\", load_previous::Bool=false)\n\nname: Name of the experiment (e.g. \"BlinkDetection\").\n\ntags: Tags which will be applied to all data gathered with this Experiment.\n\npath: To top-level of data directory (e.g. \"data/\"). If empty, files can't be saved.\n\nTODO: descs for keywords TODO: load_previous not implemented yet (maybe in another function?)\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.FFTDataDescriptor-Tuple{Int64, Int64}","page":"Function & Type Documentation","title":"BCIInterface.FFTDataDescriptor","text":"FFTDataDescriptor(num_channels::Int, max_freq::Int)\n\nData descriptor for FFT data in the format of a 2D-Array per sample, with the first dimension corresponding to the frequncies from 1 to maxfreq  and the seconds dimension corresponding to the channels from 1 to numchannels.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.MCP3208-Tuple{String, Int64}","page":"Function & Type Documentation","title":"BCIInterface.MCP3208","text":"MCP3208(path::String, num_channels::Int; max_speed_hz::Int=1000, \nonline=true)\n\nInitialise a MCP3208-based self-built EEG. \n\npath::String: SPI path of the device\n\nnum_channels::Int: Number of connected electrodes.\n\nmax_speed_hz::Int: 1000 by default. Tells the Raspberry Pi (or similar device) how often per second the output should be read. \n\nTODO: explain (side) effects\n\nonline::Bool: true by default; if set to false, get_voltage(...) will just return 0.  This is for testing all associated functions and devices using this board without having it connected (e.g. in tests).\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.ModelData-Tuple{Data, Dict}","page":"Function & Type Documentation","title":"BCIInterface.ModelData","text":"ModelData(data::Data, outputs::Dict; batchsize=5, shuffle=true)\n\nCreate data loader. outputs must be {Symbol,AbstractArray{Number}}\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.RawDataDescriptor-Tuple{Int64}","page":"Function & Type Documentation","title":"BCIInterface.RawDataDescriptor","text":"RawDataDescriptor(num_channels::Int)\n\nData descriptor for raw data in the format of a 1D-Array per sample, with each channels voltage in a row.\n\nnum_channels::Int: Number of channels the data has (= width of the row).\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.StandardProcessor","page":"Function & Type Documentation","title":"BCIInterface.StandardProcessor","text":"Standard configuration for processing EEG data. It uses a preset of functions and  options and may not work for you.\n\nCreate with Standard.\n\n\n\n\n\n","category":"type"},{"location":"API/#BCIInterface.Standard-Tuple{}","page":"Function & Type Documentation","title":"BCIInterface.Standard","text":"Standard()::StandardProcessor\n\nCreate standard configuration for processing EEG data. See StandardProcessor for more details.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface._read_metadata-Tuple{Any}","page":"Function & Type Documentation","title":"BCIInterface._read_metadata","text":"_read_metadata(filepath)\n\nInternal method used for reading from file; in function to make later  switch of file format easier.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface._write_metadata-Tuple{Any, BCIInterface.Metadata}","page":"Function & Type Documentation","title":"BCIInterface._write_metadata","text":"_write_metadata(filepath, metadata::Metadata)\n\nInternal method used for writing to file; in function to make later  switch of file format easier.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.clear!-Tuple{Data}","page":"Function & Type Documentation","title":"BCIInterface.clear!","text":"clear!(data::Data)\n\nDelete all saved data.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.clear!-Tuple{Experiment}","page":"Function & Type Documentation","title":"BCIInterface.clear!","text":"clear!(experiment::Experiment)\n\nDelete all saved raw data from experiment.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.create_data-Tuple{String, BCIInterface.FFTDataDescriptor}","page":"Function & Type Documentation","title":"BCIInterface.create_data","text":"create_data(name::String, data_desc::RawDataDescriptor)\n\nCreate new Data-Object for FFT data. \n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.create_data-Tuple{String, BCIInterface.RawDataDescriptor}","page":"Function & Type Documentation","title":"BCIInterface.create_data","text":"create_data(name::String, data_desc::RawDataDescriptor)\n\nCreate new Data-Object for raw data (MCP3208).\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.create_data-Tuple{String, Device}","page":"Function & Type Documentation","title":"BCIInterface.create_data","text":"create_data(name::String, device::Device)\n\nCreate Data-Object which fits given device (raw data, fft data, etc.).\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.createpath-Tuple{String}","page":"Function & Type Documentation","title":"BCIInterface.createpath","text":"create_path(path::String)\n\nCreate necessary folders and file if they don't exist yet, so that isdir(path) or isfile(path) returns true depending on whether path points to a folder or a file.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.gather_data!-Tuple{Experiment, Number}","page":"Function & Type Documentation","title":"BCIInterface.gather_data!","text":"gather_data!(experiment::Experiment, runtime::Number; tags::Array=[], \nextra_info::Dict=Dict())\n\nGather raw EEG data. \n\nruntime: Runtime in seconds.\n\nOptional arguments:\n\ntags: Tags to add to every data point on top of tags given to Experiment\n\nextra_info: Extra info to add to every data point on top of extra info given  to Experiment\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.get_sample!-Tuple{BCIInterface.EEGBoard}","page":"Function & Type Documentation","title":"BCIInterface.get_sample!","text":"get_sample!(board::EEGBoard)\n\nUpdates board.sample to new data from board.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.get_voltage-Tuple{MCP3208, Int64}","page":"Function & Type Documentation","title":"BCIInterface.get_voltage","text":"get_voltage(board::MCP3208, channel::Int)\n\nRead digital output of the ADC on channel channel.\n\nIf MCP3208 was given online=false at creation, return 0 instead.\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.iscompatible-Tuple{DataFrames.DataFrame, Union{Nothing, BCIInterface.Metadata}}","page":"Function & Type Documentation","title":"BCIInterface.iscompatible","text":"is_compat(df::DataFrame, metadata::Union{Metadata, Nothing})\n\nCheck if df is \"compatible\" with metadata.\n\nIf metadata is nothing, then return true (for easy use with load_metadata which returns nothing when no metadata is defined)\n\n\n\n\n\n","category":"method"},{"location":"API/#BCIInterface.process-Tuple{Device, BCIInterface.StandardProcessor}","page":"Function & Type Documentation","title":"BCIInterface.process","text":"process(device::Device, processor::StandardProcessor)\n\nTODO: Processing\n\n1. Artifacts Removal\n2. Data Filtering\n3. Feature Extraction (FFT)\n\nAlso see this, page 2529.\n\n\n\n\n\n","category":"method"}]
}
